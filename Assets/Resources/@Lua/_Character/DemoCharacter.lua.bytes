
local CSharpEventContainer = require("_Common.CSharpEventContainer")

local DemoCharacter = _MOE.class("DemoCharacter", CSharpEventContainer)

function DemoCharacter:Ctor(pawnObj, binder)
    self.PawnObj = pawnObj
    self.Binder = binder

    local EventType = _MOE.LuaEvent_MonoEventType
    self.Binder:RegisterLuaEvent(EventType.Destroyed:GetHashCode(), self.OnDestroy)

    self:RegsterCSharpEvent(self.PawnObj, "onNetworkSpawn", self.OnNetworkSpawn)
    self:RegsterCSharpEvent(self.PawnObj, "onNetworkDespawn", self.OnNetworkDespawn)
end

function DemoCharacter:OnNetworkSpawn()
    if self.PawnObj and self.PawnObj.IsOwner then
        local view = self.PawnObj:GetComponent(typeof(CS.JohnStairs.RCC.Character.Cam.RPGViewFrustum))
        if view then
            view.enabled = true
        end
        local cam = self.PawnObj:GetComponent(typeof(CS.JohnStairs.RCC.Character.Cam.RPGCamera))
        if cam then
            cam.enabled = true
            cam.ActivateControl = true
        end
        --- 事件通知CharacterController
        _MOE.EventManager:DispatchEvent("On_Local_Character_ReceiveBegin", self)
    end
end

function DemoCharacter:OnNetworkDespawn()
    if self.PawnObj and self.PawnObj.IsOwner then
        --- 事件通知CharacterController
        _MOE.EventManager:DispatchEvent("On_Local_Character_ReceiveEnd", self)
    end
end

function DemoCharacter:OnDestroy()
    self:UnRegsterAllCsharpEvents()

    self.PawnObj = nil
    self.Binder = nil
end

return DemoCharacter
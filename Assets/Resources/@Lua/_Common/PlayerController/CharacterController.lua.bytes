local CSharpEventContainer = require("_Common.CSharpEventContainer")

local BaseCharacterController = _MOE.class("BaseCharacterController", CSharpEventContainer)

function BaseCharacterController:Ctor(CharacterController, binder)
    self.CharacterController = CharacterController
    self.Binder = binder

    local EventType = _MOE.LuaEvent_MonoEventType
    self.Binder:RegisterLuaEvent(EventType.Destroyed:GetHashCode(), self.OnDestroy)

    if not _MOE.IsDS then
        -- Client操作
        self:RegsterCSharpEvent()
        _MOE.LocalLuaCharacterController = self -- 局部Character Controller
    end
end

function BaseCharacterController:On_Local_Character_ReceiveBegin()
    local kccController = self:GetKCC_CharacterController()
    if kccController then
        kccController.enabled = true
    end
end

function BaseCharacterController:GetMoeCharacterController()
    return self.CharacterController
end

function BaseCharacterController:GetKCC_CharacterController()
    local moeCharacterController = self:GetMoeCharacterController()
    if moeCharacterController then
        return moeCharacterController.Motor
    end
end

function BaseCharacterController:On_Local_Character_ReceiveEnd()
end

function BaseCharacterController:RegsterCSharpEvent()
    _MOE.EventManager:RegisterEvent("On_Local_Character_ReceiveBegin", self, self.On_Local_Character_ReceiveBegin)
    _MOE.EventManager:RegisterEvent("On_Local_Character_ReceiveEnd", self, self.On_Local_Character_ReceiveEnd)
end

function BaseCharacterController:OnDestroy()
    _MOE.EventManager:UnRegisterEvents(self)
    self:UnRegsterAllCsharpEvents()

    self.CharacterController = nil
    self.Binder = nil
    if not _MOE.IsDS then
        _MOE.LocalLuaCharacterController = nil
    end
end

return BaseCharacterController
local CSharpEventContainer = require("_Common.CSharpEventContainer")

local BaseCharacterController = _MOE.class("BaseCharacterController", CSharpEventContainer)

function BaseCharacterController:Ctor(CharacterController, binder)
    self.CharacterController = CharacterController
    self.Binder = binder
    self.UseRPGCamera = true

    local EventType = _MOE.LuaEvent_MonoEventType
    self.Binder:RegisterLuaEvent(EventType.Destroyed:GetHashCode(), self.OnDestroy)

    self:RegisterNetworkEvents()
end

function BaseCharacterController:RegisterNetworkEvents()
    if self.CharacterController then
        local PawnObj = self.CharacterController.PawnObj
        if PawnObj then
            self:RegsterCSharpEvent(PawnObj, "onNetworkSpawn", self.OnNetworkSpawn)
            self:RegsterCSharpEvent(PawnObj, "onNetworkDespawn", self.OnNetworkDespawn)
        end
    end
end

function BaseCharacterController:GetInstanceID()
    if self.InstanceID then
        return self.InstanceID
    end
    self.InstanceID = self.Binder.gameObject:GetInstanceID()
    return self.InstanceID
end

function BaseCharacterController:OnNetworkSpawn()
    if not _MOE.IsDS then
        if self:IsLocalOwner() then
            _MOE.LocalLuaCharacterController = self -- 局部Character Controller

            --- KCC控制器
            local kccController = self:GetKCCharacterController()
            if kccController then
                kccController.enabled = true
            end
            self.KCCController = kccController
            if self.UseRPGCamera then
                --- 相机激活
                local view = self.CharacterController:GetComponent(typeof(CS.JohnStairs.RCC.Character.Cam.RPGViewFrustum))
                if view then
                    view.enabled = true
                end
                local cam = self.CharacterController:GetComponent(typeof(CS.JohnStairs.RCC.Character.Cam.RPGCamera))
                if cam then
                    cam.enabled = true
                    cam.ActivateControl = true
                end
                self.RPGCamera = cam
            else
                local cam = self.CharacterController:GetComponentInChildren(typeof(CS.Cinemachine.CinemachineVirtualCameraBase))
                if cam then
                    cam.enabled = true
                end
                self.CinemachineVirtualCamera = cam
            end
            --- 事件通知CharacterController
            _MOE.EventManager:DispatchEvent("On_Local_Character_ReceiveBegin", self:GetInstanceID())
        else
            _MOE.EventManager:DispatchEvent("On_Simlate_Character_ReceiveBegin", self:GetInstanceID())
        end
    elseif _MOE.IsDS then
        _MOE.EventManager:DispatchEvent("On_Server_Character_ReceiveBegin", self:GetInstanceID())
    end
end

function BaseCharacterController:SetEnableCameraControl(isEnabled)
    if isEnabled == nil then
        isEnabled = true
    end
    if self.UseRPGCamera then
        if self.RPGCamera then
            self.RPGCamera.ActivateControl = isEnabled
        end
    elseif self.CinemachineVirtualCamera then
        self.CinemachineVirtualCamera.enabled = isEnabled
    end
end

function BaseCharacterController:OnNetworkDespawn()
    if not _MOE.IsDS then
        if self:IsLocalOwner() then
            _MOE.LocalLuaCharacterController = nil
            --- 事件通知CharacterController
            _MOE.EventManager:DispatchEvent("On_Local_Character_ReceiveEnd", self:GetInstanceID())
        else
            _MOE.EventManager:DispatchEvent("On_Simlate_Character_ReceiveEnd", self:GetInstanceID())
        end
    else
        _MOE.EventManager:DispatchEvent("On_Server_Character_ReceiveEnd", self:GetInstanceID())
    end

    self.KCCController = nil
    self.RPGCamera = nil
end

function BaseCharacterController:IsLocalOwner()
    if not self.CharacterController then
        return false
    end
    return self.CharacterController.IsLocalOwner
end

function BaseCharacterController:GetOwnerCharacter()
    local controller = self:GetMoeCharacterController()
    if controller then
        local ret = controller.gameObject
        return ret
    end
end

function BaseCharacterController:GetOwnerCharacterTransform()
    local controller = self:GetMoeCharacterController()
    if controller then
        local ret = controller.transform
        return ret
    end
end

function BaseCharacterController:GetMoeCharacterController()
    return self.CharacterController
end

function BaseCharacterController:GetKCCharacterController()
    local moeCharacterController = self:GetMoeCharacterController()
    if moeCharacterController then
        return moeCharacterController.Motor
    end
end

function BaseCharacterController:OnDestroy()
    _MOE.EventManager:UnRegisterEvents(self)
    self:UnRegsterAllCsharpEvents()

    self.CharacterController = nil
    self.Binder = nil
    self.RPGCamera = nil
    self.KCCController = nil
end

return BaseCharacterController
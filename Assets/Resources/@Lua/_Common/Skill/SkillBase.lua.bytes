local CSharpEventContainer = require("_Common.CSharpEventContainer") -- 事件
local SkillBase = _MOE.class("SkillBase", _MOE.StateBase, CSharpEventContainer)

function SkillBase:GetSkillManagerCS()
    local ret = self.m_StateMgr and self.m_StateMgr:GetSkillManagerCS() or nil
    return ret
end

function SkillBase:GetBinder()
    local ret = self.m_StateMgr and self.m_StateMgr:GetBinder() or nil
    return ret
end

function SkillBase:GetAnimancerComponent()
    local ret = self.m_StateMgr and self.m_StateMgr:GetAnimancerComponent() or nil
    return ret
end

function SkillBase:RegisterAnimateStateEvent(state, evtName, func)
    if not state or not evtName or not func then
        return false
    end
    local skillCS = self:GetSkillManagerCS()
    if not skillCS then
        return false
    end
    local ret = skillCS:AddStateEvent(state, evtName, func)
    return ret
end

function SkillBase:UnRegisterAllAnimateStateEvents(state)
    if not state then
        return
    end
    local skillCS = self:GetSkillManagerCS()
    if not skillCS then
        return
    end
    skillCS:RemoveStateAllEvents(state)
end

function SkillBase:UnRegisterAnimateStateEvent(state, evtName)
    if not state or not evtName then
        return
    end
    local skillCS = self:GetSkillManagerCS()
    if not skillCS then
        return
    end
    skillCS:RemoveStateEvent(state, evtName)
end

function SkillBase:AnimationState_BindAllEvents(state)
    if not state then
        return false
    end
    local skillCS = self:GetSkillManagerCS()
    if not skillCS then
        return false
    end
    skillCS:AnimationState_BindAllEvents(state)
end

function SkillBase:PlayActionState(animState, isLoop)
    if not animState then
        return
    end
    if isLoop == nil then
        isLoop = false
    end
    local animancer = self:GetAnimancerComponent()
    if animancer then
        if isLoop and animState and animState.Events["OnEnd"] == nil then
            animState.Events["OnEnd"] = function ()
                self:PlayActionState(animState, isLoop)
                --animState.NormalizedTime = 0
            end
            animState.Events.NormalizedEndTime = 1.0
        end
        animancer:Play(animState)
    end
end

function SkillBase:PlayAction(translition, isLoop)
    if not translition then
        return
    end
    if isLoop == nil then
        isLoop = false
    end
    local animancer = self:GetAnimancerComponent()
    if animancer then
        local state = animancer:Play(translition)
        if isLoop and state and state.Events["OnEnd"] == nil then
            state.Events["OnEnd"] = function ()
                self:PlayActionState(state, isLoop)
                --state.NormalizedTime = 0
            end
            state.Events.NormalizedEndTime = 1.0
        end
        return state
    end
end

function SkillBase:RegisterLuaEventUpdate()
    if self.m_StateMgr then
        self.m_StateMgr:RegisterLuaEventUpdate()
    end
end

function SkillBase:UnRegisterLuaEventUpdate()
    if self.m_StateMgr then
        return self.m_StateMgr:UnRegisterLuaEventUpdate()
    end
    return false
end

function SkillBase:IsRegisterLuaEventUpdate()
    if self.m_StateMgr then
        return self.m_StateMgr:IsRegisterLuaEventUpdate()
    end
    return false
end

--- 单技能子状态机
function SkillBase:SetSubStateManager(subStateMgr)
    self.SubStateManager = subStateMgr
end

--------------------------------------- 可继承方法 --------------------------------
function SkillBase:GetActionNames()
end

function SkillBase:OnScriptObjectLoaded(...)
end

function SkillBase:OnTriggerLuaEvent(...)
end

function SkillBase:OnSkillBaseInputEvent(actionName, Context)
end

function SkillBase:OnInit()
end

function SkillBase:OnDispose()
    if self.SubStateManager then
        self.SubStateManager:Dispose()
        self.SubStateManager = nil
    end
end

function SkillBase:OnEnter()
end

function SkillBase:OnExit(newStateType)
end

function SkillBase:OnUpdate()
end

return SkillBase
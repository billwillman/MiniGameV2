local SkillManagerBase = _MOE.class("SkillManagerBase", _MOE.StateManagerBase)

function SkillManagerBase:GetLuaRoot()
    if self.LuaRoot then
        return self.LuaRoot
    end
    local binder = self.Binder
    if not binder then
        return
    end
    local rootPath = binder.LuaPath
    if not rootPath or string.len(rootPath) <= 0 then
        return
    end
    --[[
    if rootPath[#rootPath] ~= "/" then
        rootPath = rootPath .. "/"
    end
    rootPath = string.gsub(rootPath, "/", ".")
    self.LuaRoot = rootPath
    return rootPath
    ]]
    rootPath = string.gsub(rootPath, "/", ".")
    local ts = string.reverse(rootPath)
    local _, i = string.find(ts, ".")
    local m = string.len(ts) - i + 1
    self.LuaRoot  = string.sub(rootPath, 1, m)
    return self.LuaRoot
end

function SkillManagerBase:Ctor(skillManagerCS, binder)
    self.SkillManagerCS = skillManagerCS
    self.Binder = binder
    if skillManagerCS then
        self.AnimancerComponent = skillManagerCS.Animancer
    end
    -- 注册的技能类（对应Lua），一个技能支持多个Layer,一个Layer支持多个State(每个Layer可以State独立)
    -- self.RegisterStateClassMap = {}
    -- 调用父类方法
    -- _MOE.StateManagerBase.CallSuper(self, "Ctor", skillManagerCS, binder)
    _MOE.StateManagerBase.Ctor(self, skillManagerCS, binder)

    -- 注册CS事件
    if binder ~= nil then
        binder:RegisterLuaEvent(_MOE.LuaEvent_MonoEventType.Start, self.OnStart)
        binder:RegisterLuaEvent(_MOE.LuaEvent_MonoEventType.Destroyed, self.OnDestroyed)
    end
    --
end

function SkillManagerBase:Dispose()
    self.SkillManagerCS = nil
    self.Binder = nil
    self.AnimancerComponent = nil
    -- 调用父类方法
    -- _MOE.StateManagerBase.CallSuper(self, "Dispose")
    _MOE.StateManagerBase.Dispose(self)
end

function SkillManagerBase:GetSkillManagerCS()
    return self.SkillManagerCS
end

function SkillManagerBase:GetBinder()
    return self.Binder
end

-- 动态注册技能
function SkillManagerBase:RegisterSkills(skillNames, isClearAll)
    if not skillNames then
        return false
    end
    local rootPath = self:GetLuaRoot()
    if not rootPath then
        return
    end
    if isClearAll == nil then
        isClearAll = false
    end
    if isClearAll then
        self.RegisterStateClassMap = {}
    end
    local actionNames = nil
    local actionMap = nil
    for _, name in ipairs(skillNames) do
        if name and string.len(name) > 0 then
            if not self.RegisterStateClassMap[name] then
                local skillLuaPath = rootPath .. name
                local skillClass = require(skillLuaPath)
                self.RegisterStateClassMap[name] = skillClass -- 注册状态类
                if skillClass.GetActionNames then
                    actionNames = actionNames or {}
                    local newActionNames = skillClass.GetActionNames()
                    if newActionNames and next(newActionNames) ~= nil then
                        for _, newActionName in ipairs(newActionNames) do
                            if newActionName and string.len(newActionName) > 0 and
                                (actionMap == nil or not actionMap[newActionName]) then
                                    table.insert(actionNames, newActionName)
                                    actionMap = actionMap or {}
                                    actionMap[newActionName] = true
                            end
                        end
                    end
                end
            end
        end
    end
    if actionNames ~= nil and next(actionNames) ~= nil then
        local csSkillMgr = self:GetSkillManagerCS()
        if csSkillMgr then
            csSkillMgr:RegisterActions(actionNames, isClearAll)
        end
    end
end

-- 动态卸载技能
function SkillManagerBase:UnRegisterSkills(removeSkillNames)
    if not removeSkillNames then
        return
    end
    local actionNames = nil
    local actionMap = nil
    for _, name in ipairs(removeSkillNames) do
        if name and string.len(name) > 0 then
            local skillClass = self.RegisterStateClassMap[name]
            if skillClass and skillClass.GetActionNames then
                actionNames = actionNames or {}
                local newActionNames = skillClass.GetActionNames()
                if newActionNames and next(newActionNames) ~= nil then
                    for _, newActionName in ipairs(newActionNames) do
                        if newActionName and string.len(newActionName) > 0 and
                                (actionMap == nil or not actionMap[newActionName]) then
                            table.insert(actionNames, newActionName)
                            actionMap = actionMap or {}
                            actionMap[newActionName] = true
                        end
                    end
                end
            end
            self.RegisterStateClassMap[name] = nil
        end
    end
    if actionNames ~= nil and next(actionNames) ~= nil then
        local csSkillMgr = self:GetSkillManagerCS()
        if csSkillMgr then
            csSkillMgr:UnRegisterSkills(actionNames)
        end
    end
end

function SkillManagerBase:UnRegisterAllSkills()
    self.RegisterStateClassMap = {}
    local csSkillMgr = self:GetSkillManagerCS()
    if csSkillMgr then
        csSkillMgr:UnRegisterAllActions()
    end
end

function SkillManagerBase:GetAnimancerComponent()
    return self.AnimancerComponent
end

--- 动作片段加载回调
function SkillManagerBase:OnScriptObjectLoaded(actionName, ...)
    local curState = self:GetCurrentState()
    if curState and curState.OnScriptObjectLoaded then
        local actionNames = curState:GetActionNames()
        if actionNames and next(actionNames) ~= nil and _MOE.TableUtils.Contains(actionNames, actionName) then
            curState:OnScriptObjectLoaded(actionName, ...)
        end
    end
end

function SkillManagerBase:OnTriggerLuaEvent(...)
    local curState = self:GetCurrentState()
    if curState then
        curState:OnTriggerLuaEvent(...)
    end
end

---------------------------------------- 继承方法 ------------------------

function SkillManagerBase:OnStart()
end

function SkillManagerBase:OnDestroyed()
end

function SkillManagerBase:OnRegisterStateClass()
end

function SkillManagerBase:OnInit()
end

function SkillManagerBase:OnUnInit()
end

return SkillManagerBase
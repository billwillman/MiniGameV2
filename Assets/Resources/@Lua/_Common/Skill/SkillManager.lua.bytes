local SkillManagerBase = _MOE.class("SkillManagerBase", _MOE.StateManagerBase)

local function _RegisterInitSkill(self)
    if not self.SkillManagerCS then
        return
    end
    local registerSkillClassNames = self.SkillManagerCS.RegisterSkillLuaClassNames
    if not registerSkillClassNames then
        return
    end
    local rootPath = self:GetLuaRoot()
    if not rootPath then
        return
    end
    for idx = 0, registerSkillClassNames.Length - 1 do
        local name = registerSkillClassNames[idx]
        if name and string.len(name) > 0 then
            local skillLuaPath = rootPath .. name
            local skillClass = require(skillLuaPath)
            self.RegisterStateClassMap[name] = skillClass -- 注册状态类
        end
    end
end

function SkillManagerBase:GetLuaRoot()
    if self.LuaRoot then
        return self.LuaRoot
    end
    local binder = self.Binder
    if not binder then
        return
    end
    local rootPath = binder.LuaPath
    if not rootPath or string.len(rootPath) <= 0 then
        return
    end
    if rootPath[#rootPath] ~= "/" then
        rootPath = rootPath .. "/"
    end
    rootPath = string.gsub(rootPath, "/", ".")
    self.LuaRoot = rootPath
    return rootPath
end

function SkillManagerBase:Ctor(skillManagerCS, binder)
    self.SkillManagerCS = skillManagerCS
    self.Binder = binder
    self.RegisterStateClassMap = {}
    _RegisterInitSkill(self)
    -- 调用父类方法
    _MOE.StateManagerBase.CallSuper(self, "Ctor", skillManagerCS, binder)
end

function SkillManagerBase:Dispose()
    self.SkillManagerCS = nil
    self.Binder = nil
    -- 调用父类方法
    _MOE.StateManagerBase.CallSuper(self, "Dispose")
end

function SkillManagerBase:GetSkillManagerCS()
    return self.SkillManagerCS
end

function SkillManagerBase:RegisterSkills(skillNames, isClearAll)
    if not skillNames then
        return false
    end
    local rootPath = self:GetLuaRoot()
    if not rootPath then
        return
    end
    if isClearAll == nil then
        isClearAll = false
    end
    if isClearAll then
        self.RegisterStateClassMap = {}
    end
    for _, name in ipairs(skillNames) do
        if name and string.len(name) > 0 then
            if not self.RegisterStateClassMap[name] then
                local skillLuaPath = rootPath .. name
                local skillClass = require(skillLuaPath)
                self.RegisterStateClassMap[name] = skillClass -- 注册状态类
            end
        end
    end
    local csSkillMgr = self:GetSkillManagerCS()
    if csSkillMgr then
        csSkillMgr:RegisterSkills(skillNames, isClearAll)
    end
end

---------------------------------------- 继承方法 ------------------------

return SkillManagerBase
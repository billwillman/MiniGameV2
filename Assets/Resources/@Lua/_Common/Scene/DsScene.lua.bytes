---- DS的场景

local DsScene = _MOE.class("DsScene", _MOE.BaseScene)
DsScene[".superctor"] = true -- 会调用父类方法

local GSNetClass = require("_Common.Net.BaseGSNet")
local MsgIds = require("_NetMsg.MsgId")

function DsScene:Ctor(sceneName, dsNetworkManager)
    self.DsNetworkManager = dsNetworkManager
    self.Transport = dsNetworkManager.gameObject:GetComponent(typeof(CS.Unity.Netcode.Transports.UTP.UnityTransport))

    ---- 注册Model ------
    self:RegisterModel("DsPlayerModel", "_DS.Model.DsPlayerModel", false)
    ---
end

local function GenerateScenesInBuild(self)
    local sceneManager = self.DsNetworkManager.SceneManager
    if sceneManager then
        local dsData = _MOE.TB["dsData"]
        _MOE.NetCodeHelper.InitHelper(sceneManager)
        local scenes = {dsData.scene}
        _MOE.NetCodeHelper.GenerateScenesInBuild2(sceneManager, scenes)
    end
end

function DsScene:GetDsIpAndPort()
    local dsData = _MOE.TB["dsData"]
    if not dsData then
        return
    end
    local ip = dsData.ip or "127.0.0.1"
    local port = dsData.port or 7777
    return ip, port
end

function DsScene:_InitDSNet()
    -- 启动DS Server监听
    local dsData = _MOE.TB["dsData"]
    local ip = dsData.ip or "127.0.0.1"
    local port = dsData.port or 7777
    self.Transport:SetConnectionData(ip, port)
    if not self.DsNetworkManager:StartServer() then
        _MOE.Logger.LogError("[DS] DsScene:StartServer False")
        _MOE.GameApp:QuitGame()
        return
    end
    -- 场景注册允许进入
    GenerateScenesInBuild(self)

    --- 注册事件
    self:RegsterCSharpEvent(self.DsNetworkManager, "ConnectionApprovalCallback", self.OnDS_ConnectionApprovalCallback)
    self:RegsterCSharpEvent(self.DsNetworkManager, "OnSceneManagerCreate", self._OnDS_OnSceneManagerCreate)
    self:RegsterCSharpEvent(self.DsNetworkManager, "OnSceneManagerClear", self._OnDS_OnSceneManagerClear)
    local ConnectionManager = self.DsNetworkManager.ConnectionManager
    self:RegsterCSharpEvent(ConnectionManager, "OnClientDisconnectCallback", self._OnDS_ClientDisconnectCallback)
    self:RegsterCSharpEvent(ConnectionManager, "OnClientConnectedCallback", self._OnDS_ClientConnectCallback)

    _MOE.Logger.Log("[DS] DsScene:StartServer True")
end

function DsScene:OnDS_ConnectionApprovalCallback(request, response)
    _MOE.Logger.LogFormat("[DsScene] ConnectionApprovalCallback Payload: {0}", request.Payload)
    if not request.Payload or string.len(request.Payload) <= 0 then
        response.Approved = false
        return
    end
    local player = _MOE.Json.decode(request.Payload)
    if not player or not player.token then
        response.Approved = false
        return
    end
    if not _MOE.TB["isLocalDS"] then
        local uids = _MOE.TB["uids"]
        if not uids then
            return false
        end
        local isOk = false
        for _, uid in ipairs(uids) do
            if uid == player.uuid then
                isOk = true
                break
            end
        end

        response.Approved = isOk -- 暂时直接认证成功
    else
        response.Approved = true -- Local DS直接通过了
    end
    if response.Approved then
        response.CreatePlayerObject = true
        response.Position = _MOE.Vector3.zero
        response.Rotation = _MOE.Quaternion.identity
    end
end

function DsScene:OnDS_ClientsLoadSceneComplete(sceneName, loadSceneMode, clientsComplete, clientsTimeout)
    _MOE.Logger.Log("[DsScene] OnServer_ClientsUnLoadSceneComplete")
end

function DsScene:OnDS_ClientsUnLoadSceneComplete(sceneName, loadSceneMode, clientsComplete, clientsTimeout)
    _MOE.Logger.Log("[DsScene] OnServer_ClientsLoadSceneComplete")
end

function DsScene:_OnDS_OnSceneManagerCreate()
    GenerateScenesInBuild(self)
    _MOE.DsNetworkHelper.NetworkManager_SetOnLoadEventCompleted(
            function (sceneName, loadSceneMode, clientsComplete, clientsTimeout)
                self:OnDS_ClientsLoadSceneComplete(sceneName, loadSceneMode, clientsComplete, clientsTimeout)
            end
        )
        _MOE.DsNetworkHelper.NetworkManager_SetOnUnloadEventCompleted(
            function (sceneName, loadSceneMode, clientsComplete, clientsTimeout)
                self:OnDS_ClientsUnLoadSceneComplete(sceneName, loadSceneMode, clientsComplete, clientsTimeout)
            end
        )
end

function DsScene:_OnDS_OnSceneManagerClear()
    _MOE.DsNetworkHelper.NetworkManager_ClearOnUnloadEventCompleted()
    _MOE.DsNetworkHelper.NetworkManager_ClearOnLoadEventCompleted()
end

function DsScene:_OnDS_ClientDisconnectCallback(clientId)
    _MOE.Logger.LogFormat("[DsScene] Client DisConnect: {0:D}", clientId)
end

function DsScene:_OnDS_ClientConnectCallback(clientId)
    _MOE.Logger.LogFormat("[DsScene] Client Connect: {0:D}", clientId)
end

function DsScene:_UnInitDSNet()
    _MOE.DsNetworkHelper.NetworkManager_ClearOnUnloadEventCompleted()
    _MOE.DsNetworkHelper.NetworkManager_ClearOnLoadEventCompleted()

    _MOE.NetCodeHelper.UnInitHelper()
end

function DsScene:_SendDsSceneReadyMsgToGS()
    local connectData = self.Transport.ConnectionData
    local msg = self:Generate_CM_DS_Ready_Msg(connectData)
    self.GsNetwork:SendMsg(MsgIds.CM_DS_Ready, msg)
end

function DsScene:_SendDsSceneRunOkMsgToGS()
    local msg = self:Generate_CM_DS_RunOk_Msg()
    self.GsNetwork:SendMsg(MsgIds.CM_DS_RunOk, msg)
end

function DsScene:_InitGSNet()
    local GsData = _MOE.TB["GsData"]
    self.GsNetwork = GSNetClass.New(_MOE.NetManager, MsgIds.CM_Heart, MsgIds.SM_Heart, "OnGSSocketResult", "OnGSSocketAbort")
    self.GsNetwork:Init()

    -------- 注册通用方法 ---------------
    -- 这里是DS端的注册
    _MOE = _MOE or {}
    _MOE.BindGSMsgNtf =  function (msgId, target, callBack)
        if msgId and target and callBack then
            self.GsNetwork:RegisterReceiveMsgProcess(msgId, function(GsNetwork, msg)
                if not target then
                    return
                end
                callBack(target, msg, GsNetwork)
            end)
        end
    end
    ------------------------------------

    self.GsNetwork:ConnectServer(GsData.ip, GsData.port)
    _MOE.EventManager:RegisterEvent("OnGSSocketResult", self, self._OnGSSocketResult)
    _MOE.EventManager:RegisterEvent("OnGSSocketAbort", self, self._OnGSSocketAbort)
    -- 发送启动OK了
    self:_SendDsSceneRunOkMsgToGS()
end

function DsScene:SendReadyMsg()
end

function DsScene:_UnInitGSNet()
    if self.GsNetwork then
        self.GsNetwork:UnInit()
        self.GsNetwork = nil
    end
end

function DsScene:OnEnter()
    -- 开启
    _MOE.Logger.Log("[DS] MultiScene Enter")
    self:_InitDSNet()
    if not self:HasResScene() then
        self:_InitGSNet()
        self:_SendDsSceneReadyMsgToGS()
    else
        self:_SendDsSceneReadyMsgToGS()
    end
end

function DsScene:OnStartLoad()
    -- 注释网络事件
    self:_InitGSNet()
    --
end

function DsScene:_OnGSSocketResult(isOk)
    if not isOk then
        _MOE.Logger.LogError("[DsScene] _OnGSSocketResult: false")
        _MOE.GameApp:QuitGame()
    end
end

function DsScene:_OnGSSocketAbort()
    _MOE.Logger.LogError("[DsScene] _OnGSSocketAbort")
    _MOE.GameApp:QuitGame()
end

function DsScene:OnExit()
    -- 网络注销
    _MOE.EventManager:UnRegisterEvents(self)
    self:_UnInitDSNet()
    self:_UnInitGSNet()
    --
    self.DsNetworkManager = nil
    self.Transport = nil
end

function DsScene:OnSceneLoadFail()
    _MOE.Logger.LogError("[DsScene] OnSceneLoadFail")
    _MOE.GameApp:QuitGame()
end

------------------------------- 可继承方法 -------------------
function DsScene:Generate_CM_DS_Ready_Msg(connectData)
    local ret = {
        ip = connectData.Address,
        port = connectData.Port,
        isLocalDS = _MOE.IsLocalDS, -- 是否是LocalDS
        clients = _MOE.TB["clients"], -- 发过来的玩家序列
        clientLoginTokens = _MOE.TB["clientLoginTokens"],
        uids = _MOE.TB["uids"],
        scene = _MOE.TB.dsData and _MOE.TB.dsData.scene or nil
    }
    return ret
end

function DsScene:Generate_CM_DS_RunOk_Msg()
    local ip, port = self:GetDsIpAndPort()
    if not ip or not port then
        return
    end
    local ret = {
        ip = ip,
        port = port,
        isLocalDS = _MOE.IsLocalDS, -- 是否是LocalDS
        clients = _MOE.TB["clients"], -- 发过来的玩家序列
        clientLoginTokens = _MOE.TB["clientLoginTokens"],
        uids = _MOE.TB["uids"],
        scene = _MOE.TB.dsData and _MOE.TB.dsData.scene or nil
    }
    return ret
end

return DsScene
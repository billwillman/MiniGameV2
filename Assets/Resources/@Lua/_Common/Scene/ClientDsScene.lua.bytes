local DsScene = _MOE.class("ClientDsScene", _MOE.BaseScene)

DsScene[".superctor"] = true -- 会调用父类方法

function DsScene:Ctor(sceneName, dsNetworkManager, isSinglePlay)
    self.DsNetworkManager = dsNetworkManager
    self.Transport = _MOE.DsNetUtils.GetTransportComponent(dsNetworkManager, _MOE.DsNetUtils.TransportType.UOSKCP)
    self.SceneLoader = dsNetworkManager.gameObject:GetComponent(typeof(_MOE.BaseResLoaderAsyncType))
    if isSinglePlay == nil then
        isSinglePlay = false
    end
    self.IsSinglePlay = isSinglePlay
end

local function GenerateScenesInBuild(self)
    local SceneManager = self.DsNetworkManager.SceneManager
    if SceneManager then
        local dsData = _MOE.TB["dsData"]
        local scenes = {dsData.scene}
        _MOE.NetCodeHelper.InitHelper(SceneManager)
        _MOE.NetCodeHelper.GenerateScenesInBuild2(SceneManager, scenes)
    end
end

local function RegisterDSClientEvents(self)
    _MOE.DsNetworkHelper.NetworkManager_SetOnClientStopped(
                        function (b)
                            self:_OnClient_ClientStopped(b)
                        end
                    )
        _MOE.DsNetworkHelper.NetworkManager_SetOnClientStarted(
            function ()
                self:_OnClient_ClientStarted()
            end
        )
        _MOE.DsNetworkHelper.NetworkManager_SetOnClientDisconnected(
            function (reason)
                self:_OnClientDisconnectCallback(reason)
            end
        )
end

local function UnRegisterDSClientEvents(self)
    if _MOE.DsNetworkHelper and _MOE.DsNetworkHelper.NetworkManager_ClearAllEvents then
        _MOE.DsNetworkHelper.NetworkManager_ClearAllEvents()
    end
end

local function LoadMainSceneABAsync(self, sceneName)
    if not self.SceneLoader or not sceneName or string.len(sceneName) <= 0 then
        return false
    end
    local ret = self.SceneLoader:LoadMainSceneABAsync(sceneName)
    --[[
    if ret then
        self.CurrentMainSceneName = sceneName
    end
    ]]
    return ret
end

function DsScene:_OnClientDisconnectCallback(reason)
    _MOE.Logger.LogFormat("[DsScene] DS DisConnect: {0:D}", reason)
end

function DsScene:_OnClient_ClientStopped(b)
    _MOE.Logger.Log("[DsScene] OnConnectionEvent: " .. tostring(b))
    UnRegisterDSClientEvents(self)
end

function DsScene:_OnClient_ClientStarted()
    UnRegisterDSClientEvents(self)
end

--- 设置DS验证信息（DS连接用）
function DsScene:SetConnectionApprovalData()
    local userInfo = _MOE.Models.RootAttr:GetUserInfo()
    if userInfo then
        self.DsNetworkManager.NetworkConfig.ConnectionData = _MOE.Json.encode(userInfo)
    else
        self.DsNetworkManager.NetworkConfig.ConnectionData = ""
    end
end

-- DS连接
function DsScene:_InitDSClientNet()
    self:SetConnectionApprovalData() -- 设置DS验证信息
    local dsData = _MOE.TB["dsData"]
    _MOE.DsNetUtils.SetTransportIpAndPort(self.Transport, dsData.ip, dsData.port)
    -- self.Transport:SetConnectionData(dsData.ip, dsData.port)
    if self.DsNetworkManager:StartClient() then
        _MOE.Logger.Log("[DsScene] StartClient: OK")
        GenerateScenesInBuild(self)
        RegisterDSClientEvents(self)
        local SceneManager = self.DsNetworkManager.SceneManager
        self:RegsterCSharpEvent(SceneManager, "OnClientPreCheckLoadSceneAndCallNext",
                        self._OnClient_PreCheckLoadSceneAndCallNext)
    end
end

function DsScene:_OnClient_MultiPlay_OnMainSceneABLoad(sceneName, loadTag)
    if not sceneName or loadTag ~= "onlyAB" then
        return
    end

    if self.OnClientSceneLoadCallBack then
        self.OnClientSceneLoadCallBack()
        self.OnClientSceneLoadCallBack = nil
    end
end

function DsScene:_OnClient_PreCheckLoadSceneAndCallNext(sceneName, onNextCallBack)
    if not self.SceneLoader then
        return true
    end
    self.OnClientSceneLoadCallBack = onNextCallBack
    self:RegsterCSharpEvent(self.SceneLoader, "onSceneLoaded", self._OnClient_MultiPlay_OnMainSceneABLoad)
    if not LoadMainSceneABAsync(self, sceneName) then
        _MOE.Logger.LogErrorFormat(
        "[DsScene] _OnClient_PreCheckLoadSceneAndCallNext Error: not vaild sceneName({0})", sceneName)
        return true -- 让他报错
    end
    return false
end

function DsScene:_OnClient_SinglePlay_OnMainSceneABLoad(sceneName, loadTag)
    if not sceneName or loadTag ~= "onlyAB" then
        return
    end

    local ret = self.DsNetworkManager.SceneManager:LoadScene(sceneName, _MOE.LoadSceneMode.Single)
    _MOE.Logger.LogFormat("[GameMode] OnClient_OnMainSceneABLoad: {0} status {1:D}", sceneName, ret)
    return ret == _MOE.SceneEventProgressStatus.Started
end

-- Host模式
function DsScene:_InitDSHostNet()
    _MOE.IsServer = true -- Host模式也是服务器
    _MOE.DsNetUtils.SetTransportIpAndPort(self.Transport, "127.0.0.1", 0)
    -- self.Transport:SetConnectionData("127.0.0.1", 0)
    if self.DsNetworkManager:StartHost() then
        _MOE.Logger.Log("[DsScene] StartHost: OK")
        GenerateScenesInBuild(self)
        RegisterDSClientEvents(self)
        local dsData = _MOE.TB["dsData"]
        local mapName = dsData.scene
        if mapName and string.len(mapName) > 0 then
            if self.SceneLoader then
                if mapName ~= self:GetCurrentActiveResSceneName() then
                    ---- 要注意这里如果初始化的时候场景并不是DsScene需要打开的场景会导致PlayerController的Auto Pawn对象第一次创建的时候被Destroy调（因为Pawn创建的时候在Host切换场景之后，并且这个Pawn是DestroyWithScene）
                    _MOE.Logger.Log("[DsScene] _InitDSHostNet changeScene: " .. mapName)
                    self:RegsterCSharpEvent(self.SceneLoader, "onSceneLoaded", self._OnClient_SinglePlay_OnMainSceneABLoad)
                    if not LoadMainSceneABAsync(self, mapName) then
                        _MOE.Logger.LogErrorFormat(
                            "[DsScene] _InitDSHostNet Error: not vaild sceneName({0})", mapName)
                        return
                    end
                end
            end
        end
    else
        _MOE.Logger.LogError("[DsScene] StartHost: Failed")
    end
end

function DsScene:_UnInitDSNet()
    self.DsNetworkManager.NetworkConfig.ConnectionData = "" -- 对应 SetConnectionApprovalData 的清理
    UnRegisterDSClientEvents(self)
    _MOE.NetCodeHelper.UnInitHelper()
    self.OnClientSceneLoadCallBack = nil
end

function DsScene:OnEnter()
    _MOE.Logger.Log("DsScene Enter")
    if self.IsSinglePlay then
        self:_InitDSHostNet() -- 单机模式
    else
        self:_InitDSClientNet() -- 联机模式
    end
end

function DsScene:OnExit()
    _MOE.EventManager:UnRegisterEvents(self)
    self:_UnInitDSNet()
    _MOE.IsServer = false
    self.DsNetworkManager = nil
    self.Transport = nil
    self.SceneLoader = nil
end

return DsScene
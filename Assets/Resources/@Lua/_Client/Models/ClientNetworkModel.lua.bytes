local _M = _MOE.class("ClientNetworkModel", _MOE.BaseModel)

local GsNetClass = require("_Common.Net.BaseGSNet")
require("_NetMsg.MsgId")

function _M:OnInit()
    self.GsNetwork = GsNetClass.New(_MOE.NetworkManager, _MOE.MsgIds.CM_Heart, _MOE.MsgIds.SM_Heart,
        "OnGSSocketResult", "OnGSSocketAbort")
    self.GsNetwork:Init()
    self.GsNetwork:RegisterReceiveMsgProcess(_MOE.MsgIds.SM_DS_Info, _M.On_SM_DS_Info)
end

function _M:RegisterEvents()
    _MOE.EventManager:RegisterEvent("OnGSSocketResult", self, self._OnGSSocketResult)
    _MOE.EventManager:RegisterEvent("OnGSSocketAbort", self, self._OnGSSocketAbort)
end

function _M:_OnGSSocketAbort()
    _MOE.EventManager:DispatchEvent(_MOE.ClientEvents.ON_GS_CONNECT_ABORT)
end

function _M:_OnGSSocketResult(isOk)
    _MOE.EventManager:DispatchEvent(_MOE.ClientEvents.ON_GS_CONNECT_RESULT, isOk)
end

function _M.On_SM_DS_Info(GsNetwork, msg)
end

function _M:ConnectServer()
    if not _MOE.GsData then
        return false
    end
    return self.GsNetwork:ConnectServer(_MOE.GsData.ip, _MOE.GsData.port)
end

function _M:OnUnInit()
    if self.GsNetwork ~= nil then
        self.GsNetwork:UnInit()
        self.GsNetwork = nil
    end
end

return _M
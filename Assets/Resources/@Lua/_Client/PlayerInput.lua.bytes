local CSharpEventContainer = require("_Common.CSharpEventContainer")
local PlayerInput = _MOE.class("PlayerInput", CSharpEventContainer)

local CSharUtils = require("_Common.CSharpUtils")

function PlayerInput:Ctor(target, binder)
    _MOE.Logger.Log("[PlayerInput] PlayerInput Create")
    self.PlayerInput = target
    self.Binder = binder

    local EventType = _MOE.LuaEvent_MonoEventType
    self.LuaInputActionCallBacks = {}

    --_MOE.Logger.Log(EventType.Awake:GetHashCode())
    self.Binder:RegisterLuaEvent(EventType.Awake:GetHashCode(), self.OnAwake)
    self.Binder:RegisterLuaEvent(EventType.Destroyed:GetHashCode(), self.OnDestroy)
end

function PlayerInput:InitEvents()
    local asset = self.PlayerInput.actions
    if asset then
        local PlayerMode = asset:FindActionMap("Player", true)
        if PlayerMode then
            local MoveAction = PlayerMode:FindAction("Move", true)
            if MoveAction then -- w,a,s,d
                local actionType = CS.UnityEngine.InputSystem.PlayerInput.ActionEvent
                local events = CSharUtils.CreateArray(actionType, 1)
                self.MoveCSharpEvt = actionType(MoveAction)
                self.MoveCSharpEvt, self.MoveLuaEvt = CSharUtils.AddUnityEvent(self, self.MoveCSharpEvt, self.OnInputEvent)
                events[0] = self.MoveCSharpEvt
                --_MOE.Logger.Log(events.Length)
                self.PlayerInput.actionEvents = _MOE.ILuaBinder.CreatePlayerInputActionEvents(events)
                --[[
                self:RegsterCSharpEvent(MoveAction, "started", self.OnMoveAction)
                self:RegsterCSharpEvent(MoveAction, "canceled", self.OnCanceled)
                self:RegsterCSharpEvent(MoveAction, "performed", self.OnPerformed)
                ]]
            end
        end
    end
end

function PlayerInput:RegisterLuaActionCallBack(actionName, func, this)
    self.LuaInputActionCallBacks = self.LuaInputActionCallBacks or {}
    if func == nil then
        self.LuaInputActionCallBacks[actionName]  = nil
        return
    end
    self.LuaInputActionCallBacks[actionName] = function(CallbackContext)
        if this ~= nil then
            func(this, CallbackContext)
        end
    end
end

function PlayerInput:UnRegisterLuaActionCallBack(actionName)
    if self.LuaInputActionCallBacks == nil or actionName == nil or type(actionName) ~= "string" or
        string.len(actionName) <= 0 then
        return
    end
    self.LuaInputActionCallBacks[actionName] = nil
end

function PlayerInput:OnInputEvent(CallbackContext)
    _MOE.Logger.Log("OnInputEvent")
    if self.LuaInputActionCallBacks ~= nil and CallbackContext ~= nil and CallbackContext.action  ~= nil then
        local actionName = CallbackContext.action.name
        local func = self.LuaInputActionCallBacks[actionName]
        if func ~= nil then
            func(CallbackContext)
        end
    end
end

function PlayerInput:OnAwake()
    self:InitEvents()
end

function PlayerInput:OnDestroy()
    self:UnRegsterAllCsharpEvents()
    CSharUtils.RemoveUnityEvent(self.MoveCSharpEvt, self.MoveLuaEvt)
    self.MoveCSharpEvt = nil
    self.MoveLuaEvt = nil
    self.LuaInputActionCallBacks = nil
    _MOE.Logger.Log("[PlayerInput] OnDestroy")
end

return PlayerInput
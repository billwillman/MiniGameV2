local Locomotion = _MOE.class("DemoCharacter_Locomotion", _MOE.SkillBase)

function Locomotion:GetActionNames()
    local ret = {
        "Loom_walk_run"
    }
    return ret
end

-- xlua.private_accessible(CS.Animancer.AnimancerEvent)

function Locomotion:OnInit()
    Locomotion:CallSuper("OnInit", self)

    self.ActionMap = {
        ["Loom_walk_run"] = {
            OnInit = function (animState)
                if not animState then
                    return
                end
                animState:SetFloat("SpeedY", 0.5)
                --self:AnimationState_BindAllEvents(animState)
            end
        }
    }
    self.CurrentMoveSpeed = 0
end

function Locomotion:OnScriptObjectLoaded(resName, translition)
    _MOE.Logger.LogFormat("[Locomotion] resName: {0}", resName)
    if translition and self.ActionMap[resName] then
        self.ActionMap[resName].animState = translition
        local animState = self:PlayAction(translition)
        self.ActionMap[resName].OnInit(animState)
        self.CurrentAnimState = animState
    end
end

function Locomotion:GetCurrentMoveSpeed()
    return self.CurrentMoveSpeed or 0
end

function Locomotion:UpdateSpeedToAnimState()
    if self.CurrentAnimState then
        local SpeedY = 0.5 + self:GetCurrentMoveSpeed()/2.0
        self.CurrentAnimState:SetFloat("SpeedY", SpeedY)
    end
end

-- 重置IDLE
function Locomotion:ResetIdle()
    self.CurrentMoveSpeed = 0
    self:UpdateSpeedToAnimState()
    self:UnRegisterLuaEventUpdate()
    self.MovePt = nil
end

function Locomotion:OnSkillBaseInputEvent(actionName, Context)
    if actionName == "Move" then
        -- 移动
        if Context.actionType == _MOE.InputActionPhase.Performed or Context.actionType == _MOE.InputActionPhase.Canceled then
            if self.CurrentAnimState  then
                local movePt = Context:GetVector2D()
                -- _MOE.Logger.LogFormat("[movePt]: ({0:F}, {1:F})", movePt.x, movePt.y)
                if movePt.y > 0 then
                    self.MovePt = movePt
                   if not self:IsRegisterLuaEventUpdate() then
                        self:RegisterLuaEventUpdate()
                   end
                else
                    self:ResetIdle() -- 重置IDLE
                end
            end
        end
    end
end

function Locomotion:OnExit()
    self.CurrentAnimState = nil
    self.MovePt = nil
    Locomotion:CallSuper("OnExit", self)
end

function Locomotion:UpdateCurrentMoveSpeed()
    if self.MovePt ~= nil then
        if self.MovePt.y > 0 then
            self.CurrentMoveSpeed = self.CurrentMoveSpeed + 2 * _MOE.UnityTime.deltaTime
            self.CurrentMoveSpeed = math.min(1.0, self.CurrentMoveSpeed)
            -- _MOE.Logger.LogFormat("[Locomotion] Speed: {0:F}", self.CurrentMoveSpeed)
            self:UpdateSpeedToAnimState()
        end
    end
end

function Locomotion:OnUpdate()
    Locomotion:CallSuper("OnUpdate", self)
    self:UpdateCurrentMoveSpeed()
end

return Locomotion
local Locomotion = _MOE.class("DemoCharacter_Locomotion", _MOE.SkillBase)

function Locomotion:GetActionNames()
    local ret = {
        "Loom_walk_run"
    }
    return ret
end

-- xlua.private_accessible(CS.Animancer.AnimancerEvent)

function Locomotion:OnInit()
    Locomotion:CallSuper("OnInit", self)

    self.ActionMap = {
        ["Loom_walk_run"] = {
            OnInit = function (animState)
                if not animState then
                    return
                end
                animState:SetFloat("SpeedY", 0.5)
                --self:AnimationState_BindAllEvents(animState)
            end
        }
    }
    self.CurrentMoveSpeed = 0
    self.Camera = _MOE.FindMainCamera()
end

function Locomotion:OnScriptObjectLoaded(resName, translition)
    _MOE.Logger.LogFormat("[Locomotion] resName: {0}", resName)
    if translition and self.ActionMap[resName] then
        self.ActionMap[resName].animState = translition
		if not _MOE.IsDS then
			local animState = self:PlayAction(translition)
			self.ActionMap[resName].OnInit(animState)
			self.CurrentAnimState = animState
		end
    end
end

function Locomotion:GetCurrentMoveSpeed()
    return self.CurrentMoveSpeed or 0
end

function Locomotion:UpdateSpeedToAnimState()
    if self.CurrentAnimState then
        local SpeedY = 0.5 + self:GetCurrentMoveSpeed()/2.0
        self.CurrentAnimState:SetFloat("SpeedY", SpeedY)
    end
end

-- 重置IDLE
function Locomotion:ResetIdle()
    self:UnRegisterCharacterKCC()

    self.CurrentMoveSpeed = 0
    self:ApplyZeroMoeCharacterDefaultVelocity()
    self:UpdateSpeedToAnimState()
    self:UnRegisterLuaEventUpdate()
    self.MovePt = nil
    self.RotAngle = nil
end

-- 根据相机更新角色朝向（暂时这样直接硬切，后续用子状态机来切换状态，限定一个范围，超过范围，则做一个快速转动后再移动，再范围内再硬切）
function Locomotion:UpdateRotAngleByControlCamera()
    if self.Camera then
        local forward = self.Camera.transform.forward
        forward.y = 0
        -- local transform = self:GetOwnerTransform()
        local originforward = _MOE.Vector3(0, 0, 1)
        -- 旋转
        local angle = _MOE.Vector3.Angle(originforward, forward)
        angle = forward.x < 0 and -angle or angle
        self.RotAngle = angle
    end
end

function Locomotion:OnKcc_UpdateRotation(quat, deltaTime)
    self:UpdateRotAngleByControlCamera()
    self:UpdateCurrentMoveSpeed(deltaTime)
    if self.RotAngle then
        quat = _MOE.Quaternion.Euler(0, self.RotAngle, 0)
    end
    return quat
end

function Locomotion:UpdateKCC_CurrentVelecity()
    if self.CurrentMoveSpeed then
        local transform = self:GetLocalCharacterTransform()
        if transform then
            local currentVelocity = transform.forward * self.CurrentMoveSpeed * 5.0
            self:ApplyMoeCharacterDefaultVelocity(currentVelocity)
        end
    else
        self:ApplyZeroMoeCharacterDefaultVelocity()
    end
end

function Locomotion:RegisterCharacterKCC()
    self:RegisterKCC_Controller_Event("onUpdateRotation", self.OnKcc_UpdateRotation)
end

function Locomotion:UnRegisterCharacterKCC()
    self:UnRegisterKCC_Controller_Event("onUpdateRotation")
end

function Locomotion:BeginMoveControl()
    --[[
    if not self:IsRegisterLuaEventUpdate() then
        self:RegisterLuaEventUpdate()
    ]]
    if not self:HasCSharpEvent("onUpdateRotation") then
        xpcall(self.RegisterCharacterKCC, _G.ErrorHandler, self)
   end
end

function Locomotion:EndMoveControl()
    self:ResetIdle() -- 重置IDLE
end

function Locomotion:OnSkillBaseInputEvent(actionName, Context)
    if actionName == "Move" then
        -- 移动
        if Context.actionType == _MOE.InputActionPhase.Performed or Context.actionType == _MOE.InputActionPhase.Canceled then
            if self.CurrentAnimState  then
                local movePt = Context:GetVector2D()
                -- _MOE.Logger.LogFormat("[movePt]: ({0:F}, {1:F})", movePt.x, movePt.y)
                if movePt.y > 0 then
                    if self.MovePt == nil or ((movePt - self.MovePt).sqrMagnitude > 0.0001) then
                        self.CurrentMoveSpeed = 0
                    end
                    self.MovePt = movePt
                    self:BeginMoveControl()
                else
                    self:EndMoveControl()
                end
            end
        end
    end
end

function Locomotion:ResetData()
    self.CurrentAnimState = nil
    self.MovePt = nil
    self.Camera = nil
end

function Locomotion:OnExit()
    xpcall(self.UnRegisterCharacterKCC, _G.ErrorHandler, self)
    self:ApplyZeroMoeCharacterDefaultVelocity()
    self:ResetData()
    Locomotion:CallSuper("OnExit", self)
end

function Locomotion:OnDispose()
    xpcall(self.UnRegisterCharacterKCC, _G.ErrorHandler, self)
    self:ApplyZeroMoeCharacterDefaultVelocity()
    self:ResetData()
    Locomotion:CallSuper("OnDispose", self)
end

function Locomotion:UpdateCurrentMoveSpeed(deltaTime)
    if self.MovePt ~= nil then
        if math.abs(self.MovePt.y) > 0.000001 or math.abs(self.MovePt.x) > 0.000001 then
            if deltaTime == nil then
                deltaTime = _MOE.UnityTime.deltaTime
            end
            self.CurrentMoveSpeed = self.CurrentMoveSpeed + 2 * deltaTime
            self.CurrentMoveSpeed = math.min(1.0, self.CurrentMoveSpeed)
            -- _MOE.Logger.LogFormat("[Locomotion] Speed: {0:F}", self.CurrentMoveSpeed)
            self:UpdateSpeedToAnimState()
            self:UpdateKCC_CurrentVelecity()
        end
    end
end

--[[
function Locomotion:OnUpdate()
    Locomotion:CallSuper("OnUpdate", self)
    self:UpdateRotAngleByControlCamera()
    self:UpdateCurrentMoveSpeed()
end
]]

return Locomotion
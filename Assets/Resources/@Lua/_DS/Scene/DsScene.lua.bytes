---- DS的场景

local DsScene = _MOE.class("DsScene", _MOE.BaseScene)
DsScene[".superctor"] = true -- 会调用父类方法

local GSNetClass = require("_Common.Net.BaseGSNet")
local MsgIds = require("_NetMsg.MsgId")

function DsScene:Ctor(sceneName, dsNetworkManager)
    self.DsNetworkManager = dsNetworkManager
    self.Transport = dsNetworkManager.gameObject:GetComponent(typeof(CS.Unity.Netcode.Transports.UTP.UnityTransport))
end

function DsScene:_InitDSNet()
    local dsData = _MOE.TB["dsData"]
    _MOE.NetCodeHelper.InitHelper(self.DsNetworkManager)
    local scenes = {dsData.scene}
    _MOE.NetCodeHelper.GenerateScenesInBuild2(self.DsNetworkManager, scenes)
end

function DsScene:_UnInitDSNet()
    _MOE.DsNetworkHelper.NetworkManager_ClearOnUnloadEventCompleted()
    _MOE.DsNetworkHelper.NetworkManager_ClearOnLoadEventCompleted()

    _MOE.NetCodeHelper.UnInitHelper()
end

function DsScene:OnEnter()
    -- 开启
    _MOE.Logger.Log("[DS] MultiScene Enter")
    local dsData = _MOE.TB["dsData"]
    local ip = dsData.ip or "127.0.0.1"
    local port = dsData.port or 7777
    self.Transport:SetConnectionData(ip, port)
    if not self.DsNetworkManager:StartServer() then
        _MOE.Logger.LogError("[DS] DsScene:StartServer False")
        _MOE.GameApp:QuitGame()
        return
    end
    self:_InitDSNet()
    _MOE.Logger.Log("[DS] DsScene:StartServer True")
    -- 注释网络事件
    local GsData = _MOE.TB["GsData"]
    self.GsNetwork = GSNetClass.New(_MOE.NetManager, MsgIds.CM_Heart, MsgIds.SM_Heart, "OnGSSocketResult", "OnGSSocketAbort")
    self.GsNetwork:Init()
    self.GsNetwork:ConnectServer(GsData.ip, GsData.port)
    _MOE.EventManager:RegisterEvent("OnGSSocketResult", self, self._OnGSSocketResult)
    _MOE.EventManager:RegisterEvent("OnGSSocketAbort", self, self._OnGSSocketAbort)
    local connectData = self.Transport.ConnectionData
    self.GsNetwork:SendMsg(MsgIds.CM_DS_Ready, {
        ip = connectData.Address,
        port = connectData.Port,
        isLocalDS = _MOE.IsLocalDS, -- 是否是LocalDS
    })
    --
end

function DsScene:_OnGSSocketResult(isOk)
    if not isOk then
        _MOE.Logger.LogError("[DsScene] _OnGSSocketResult: false")
        _MOE.GameApp:QuitGame()
    end
end

function DsScene:_OnGSSocketAbort()
    _MOE.Logger.LogError("[DsScene] _OnGSSocketAbort")
    _MOE.GameApp:QuitGame()
end

function DsScene:OnExit()
    -- 网络注销
    _MOE.EventManager:UnRegisterEvents(self)
    self:_UnInitDSNet()
    if self.GsNetwork then
        self.GsNetwork:UnInit()
        self.GsNetwork = nil
    end
    --
    self.DsNetworkManager = nil
    self.Transport = nil
end

function DsScene:OnSceneLoadFail()
    _MOE.Logger.LogError("[DsScene] OnSceneLoadFail")
    _MOE.GameApp:QuitGame()
end

return DsScene
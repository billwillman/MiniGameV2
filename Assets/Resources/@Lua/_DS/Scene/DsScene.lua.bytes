---- DS的场景

local DsScene = _MOE.class("DsScene", _MOE.BaseScene)
DsScene[".superctor"] = true -- 会调用父类方法

local GSNetClass = require("_Common.Net.BaseGSNet")
local MsgIds = require("_NetMsg.MsgId")

function DsScene:Ctor(sceneName, dsNetworkManager)
    self.DsNetworkManager = dsNetworkManager
    self.DsSceneManager = dsNetworkManager.SceneManager
    self.Transport = dsNetworkManager.gameObject:GetComponent(typeof(CS.Unity.Netcode.Transports.UTP.UnityTransport))
end

local function GenerateScenesInBuild(self)
    local dsData = _MOE.TB["dsData"]
    _MOE.NetCodeHelper.InitHelper(self.DsSceneManager)
    local scenes = {dsData.scene}
    _MOE.NetCodeHelper.GenerateScenesInBuild2(self.DsSceneManager, scenes)
end

function DsScene:_InitDSNet()
    GenerateScenesInBuild(self)

    --- 注册事件
    self:RegsterCSharpEvent(self.DsNetworkManager, "ConnectionApprovalCallback", self.OnDS_ConnectionApprovalCallback)
    self:RegsterCSharpEvent(self.DsNetworkManager, "OnSceneManagerCreate", self._OnDS_OnSceneManagerCreate)
    self:RegsterCSharpEvent(self.DsNetworkManager, "OnSceneManagerClear", self._OnDS_OnSceneManagerClear)
    local ConnectionManager = self.DsNetworkManager.ConnectionManager
    self:RegsterCSharpEvent(ConnectionManager, "OnClientDisconnectCallback", self._OnDS_ClientDisconnectCallback)
end

function DsScene:OnDS_ConnectionApprovalCallback(request, response)
    _MOE.Logger.LogFormat("[DsScene] ConnectionApprovalCallback Payload: {0}", request.Payload)
    response.Approved = true -- 暂时直接认证成功
    if response.Approved then
        response.CreatePlayerObject = true
        response.Position = _MOE.Vector3.zero
        response.Rotation = _MOE.Quaternion.identity
    end
end

function DsScene:OnDS_ClientsLoadSceneComplete(sceneName, loadSceneMode, clientsComplete, clientsTimeout)
    _MOE.Logger.Log("[DsScene] OnServer_ClientsUnLoadSceneComplete")
end

function DsScene:OnDS_ClientsUnLoadSceneComplete(sceneName, loadSceneMode, clientsComplete, clientsTimeout)
    _MOE.Logger.Log("[DsScene] OnServer_ClientsLoadSceneComplete")
end

function DsScene:_OnDS_OnSceneManagerCreate()
    GenerateScenesInBuild(self)
    _MOE.DsNetworkHelper.NetworkManager_SetOnLoadEventCompleted(
            function (sceneName, loadSceneMode, clientsComplete, clientsTimeout)
                self:OnDS_ClientsLoadSceneComplete(sceneName, loadSceneMode, clientsComplete, clientsTimeout)
            end
        )
        _MOE.DsNetworkHelper.NetworkManager_SetOnUnloadEventCompleted(
            function (sceneName, loadSceneMode, clientsComplete, clientsTimeout)
                self:OnDS_ClientsUnLoadSceneComplete(sceneName, loadSceneMode, clientsComplete, clientsTimeout)
            end
        )
end

function DsScene:_OnDS_OnSceneManagerClear()
    _MOE.DsNetworkHelper.NetworkManager_ClearOnUnloadEventCompleted()
    _MOE.DsNetworkHelper.NetworkManager_ClearOnLoadEventCompleted()
end

function DsScene:_OnDS_ClientDisconnectCallback(clientId)
    _MOE.Logger.LogFormat("[DsScene] Client DisConnect: {0:D}", clientId)
end

function DsScene:_UnInitDSNet()
    _MOE.DsNetworkHelper.NetworkManager_ClearOnUnloadEventCompleted()
    _MOE.DsNetworkHelper.NetworkManager_ClearOnLoadEventCompleted()

    _MOE.NetCodeHelper.UnInitHelper()
end

function DsScene:_InitGSNet()
    local GsData = _MOE.TB["GsData"]
    self.GsNetwork = GSNetClass.New(_MOE.NetManager, MsgIds.CM_Heart, MsgIds.SM_Heart, "OnGSSocketResult", "OnGSSocketAbort")
    self.GsNetwork:Init()
    self.GsNetwork:ConnectServer(GsData.ip, GsData.port)
    _MOE.EventManager:RegisterEvent("OnGSSocketResult", self, self._OnGSSocketResult)
    _MOE.EventManager:RegisterEvent("OnGSSocketAbort", self, self._OnGSSocketAbort)
    local connectData = self.Transport.ConnectionData
    self.GsNetwork:SendMsg(MsgIds.CM_DS_Ready, {
        ip = connectData.Address,
        port = connectData.Port,
        isLocalDS = _MOE.IsLocalDS, -- 是否是LocalDS
    })
end

function DsScene:_UnInitGSNet()
    if self.GsNetwork then
        self.GsNetwork:UnInit()
        self.GsNetwork = nil
    end
end

function DsScene:OnEnter()
    -- 开启
    _MOE.Logger.Log("[DS] MultiScene Enter")
    local dsData = _MOE.TB["dsData"]
    local ip = dsData.ip or "127.0.0.1"
    local port = dsData.port or 7777
    self.Transport:SetConnectionData(ip, port)
    if not self.DsNetworkManager:StartServer() then
        _MOE.Logger.LogError("[DS] DsScene:StartServer False")
        _MOE.GameApp:QuitGame()
        return
    end
    self:_InitDSNet()
    _MOE.Logger.Log("[DS] DsScene:StartServer True")
    -- 注释网络事件
    self:_InitGSNet()
    --
end

function DsScene:_OnGSSocketResult(isOk)
    if not isOk then
        _MOE.Logger.LogError("[DsScene] _OnGSSocketResult: false")
        _MOE.GameApp:QuitGame()
    end
end

function DsScene:_OnGSSocketAbort()
    _MOE.Logger.LogError("[DsScene] _OnGSSocketAbort")
    _MOE.GameApp:QuitGame()
end

function DsScene:OnExit()
    -- 网络注销
    _MOE.EventManager:UnRegisterEvents(self)
    self:_UnInitDSNet()
    self:_UnInitGSNet()
    --
    self.DsNetworkManager = nil
    self.Transport = nil
    self.DsSceneManager = nil
end

function DsScene:OnSceneLoadFail()
    _MOE.Logger.LogError("[DsScene] OnSceneLoadFail")
    _MOE.GameApp:QuitGame()
end

return DsScene
local BaseModel = require("_DS.Model.DsSceneModel")
local _M = _MOE.class("DsPlayerModel", BaseModel)

require("_Common.Net.DSMsgDefine")
local MsgIds = require("_NetMsg.MsgId")

function _M:onServerStrEvent(ownerClientId, eventName, strParam)
    _MOE.Logger.LogFormat("[DSPlayerController] Client => DS eventName: {0} param: {1}", eventName, strParam)
    local GSNetwork = self:GetGSNetwork()
    if eventName == _MOE.DS.ClientMsgIds.ClientLoginDS then
        -- 发送消息给DSA
        local luaPlayerController = _MOE.PlayerControllers[ownerClientId]
        if luaPlayerController then
            luaPlayerController.loginToken = strParam -- 设置登录token
        end
        GSNetwork:SendMsg(MsgIds.CM_DS_PlayerLogin, {ownerClientId = ownerClientId, loginToken = strParam}) -- 登录
    end
end

function _M:RegisterPlayerEvents(LuaPlayerController)
    if not LuaPlayerController then
        return false
    end
    self:RegsterCSharpEvent(LuaPlayerController.PlayerController, "onServerStrEvent", self.onServerStrEvent)
    return true
end

function _M:UnRegisterPlayerEvents(LuaPlayerController)
    if not LuaPlayerController then
        return false
    end
    self:UnRegsterCSharpEvent(LuaPlayerController.PlayerController, "onServerStrEvent")
    LuaPlayerController.loginToken = nil -- 清空loginToken
    -- 发送消息给DSA
    local GSNetwork = self:GetGSNetwork()
    GSNetwork:SendMsg(MsgIds.CM_DS_PlayerLoginOut, {ownerClientId = LuaPlayerController:GetClientId()})
    ----
    return true
end

return _M